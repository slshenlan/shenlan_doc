import{_ as e,o as a,c as l,S as i}from"./chunks/framework.3d018db5.js";const P=JSON.parse('{"title":"接口规范","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/handbook/dev/interface-specification.md","filePath":"docs/frontend/handbook/dev/interface-specification.md","lastUpdated":1729236017000}'),t={name:"docs/frontend/handbook/dev/interface-specification.md"},p=i('<h1 id="接口规范" tabindex="-1">接口规范 <a class="header-anchor" href="#接口规范" aria-label="Permalink to &quot;接口规范&quot;">​</a></h1><p>Restful API 是目前比较成熟的一套互联网应用程序的 API 设计理念，Rest 是一组架构约束条件和原则，如何 Rest 约束条件和原则的架构，我们就称为 Restful 架构，Restful 架构具有结构清晰、符合标准、易于理解以及扩展方便等特点，受到越来越多网站的采用！</p><p>Restful API 接口规范包括以下部分：</p><h2 id="一、协议" tabindex="-1">一、协议 <a class="header-anchor" href="#一、协议" aria-label="Permalink to &quot;一、协议&quot;">​</a></h2><p>API 与用户的通信协议，总是使用 HTTPs 协议。</p><h2 id="二、域名" tabindex="-1">二、域名 <a class="header-anchor" href="#二、域名" aria-label="Permalink to &quot;二、域名&quot;">​</a></h2><p>应该尽量将 API 部署在专用域名之下，如<a href="https://api.xn--ohqp9l2rds0f.com" target="_blank" rel="noreferrer">https://api.专属域名.com</a>；如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下，如<a href="https://xn--ohqp9l2rds0f.com/api/%E3%80%82" target="_blank" rel="noreferrer">https://专属域名.com/api/。</a></p><h2 id="三、版本" tabindex="-1">三、版本 <a class="header-anchor" href="#三、版本" aria-label="Permalink to &quot;三、版本&quot;">​</a></h2><p>可以将版本号放在 HTTP 头信息中，也可以放入 URL 中，如<a href="https://api.xn--ohqp9l2rds0f.com/v1/" target="_blank" rel="noreferrer">https://api.专属域名.com/v1/</a></p><h2 id="四、路径" tabindex="-1">四、路径 <a class="header-anchor" href="#四、路径" aria-label="Permalink to &quot;四、路径&quot;">​</a></h2><p>路径是一种地址，在互联网上表现为网址，在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&quot;集合&quot;（collection），所以 API 中的名词也应该使用复数，如<a href="https://api.xn--ohqp9l2rds0f.com/v1/students%E3%80%82" target="_blank" rel="noreferrer">https://api.专属域名.com/v1/students。</a></p><h2 id="五、http-动词" tabindex="-1">五、HTTP 动词 <a class="header-anchor" href="#五、http-动词" aria-label="Permalink to &quot;五、HTTP 动词&quot;">​</a></h2><p>对于资源的具体操作类型，由 HTTP 动词表示，HTTP 动词主要有以下几种，括号中对应的是 SQL 命令。</p><ol><li><p>GET（SELECT）：从服务器取出资源（一项或多项）；</p></li><li><p>POST（CREATE）：在服务器新建一个资源；</p></li><li><p>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）；</p></li><li><p>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）；</p></li><li><p>DELETE（DELETE）：从服务器删除资源；</p></li><li><p>HEAD：获取资源的元数据；</p></li><li><p>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</p></li></ol><h2 id="六、过滤信息" tabindex="-1">六、过滤信息 <a class="header-anchor" href="#六、过滤信息" aria-label="Permalink to &quot;六、过滤信息&quot;">​</a></h2><p>如果记录数量很多，服务器不可能都将它们返回给用户，API 会提供参数，过滤返回结果，常见的参数有：</p><ol><li><p>?limit=20：指定返回记录的数量为 20；</p></li><li><p>?offset=8：指定返回记录的开始位置为 8；</p></li><li><p>?page=1&amp;per_page=50：指定第 1 页，以及每页的记录数为 50；</p></li><li><p>?sortby=name&amp;order=asc：指定返回结果按照 name 属性进行升序排序；</p></li><li><p>?animal_type_id=2：指定筛选条件。</p></li></ol><h2 id="七、状态码" tabindex="-1">七、状态码 <a class="header-anchor" href="#七、状态码" aria-label="Permalink to &quot;七、状态码&quot;">​</a></h2><p>服务器会向用户返回状态码和提示信息，以下是常用的一些状态码：</p><ol><li><p>200 OK - [GET]：服务器成功返回用户请求的数据；</p></li><li><p>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功；</p></li><li><p>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）；</p></li><li><p>204 NO CONTENT - [DELETE]：用户删除数据成功；</p></li><li><p>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作；</p></li><li><p>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）；</p></li><li><p>403 Forbidden - [*] 表示用户得到授权（与 401 错误相对），但是访问是被禁止的；</p></li><li><p>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作；</p></li><li><p>406 Not Acceptable - [GET]：用户请求的格式不可得；</p></li><li><p>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的；</p></li><li><p>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误；</p></li><li><p>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p></li></ol><h2 id="八、错误处理" tabindex="-1">八、错误处理 <a class="header-anchor" href="#八、错误处理" aria-label="Permalink to &quot;八、错误处理&quot;">​</a></h2><p>如果状态码是 4xx，就会向用户返回出错信息，一般来说，返回的信息中将 error 作为键名，出错信息作为键值。</p><h2 id="九、返回结果" tabindex="-1">九、返回结果 <a class="header-anchor" href="#九、返回结果" aria-label="Permalink to &quot;九、返回结果&quot;">​</a></h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范：</p><ol><li><p>GET /collection：返回资源对象的列表（数组）；</p></li><li><p>GET /collection/resource：返回单个资源对象；</p></li><li><p>POST /collection：返回新生成的资源对象；</p></li><li><p>PUT /collection/resource：返回完整的资源对象；</p></li><li><p>PATCH /collection/resource：返回完整的资源对象；</p></li><li><p>DELETE /collection/resource：返回一个空文档。</p></li></ol><p>十、Hypermedia API</p><p>RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。</p>',27),o=[p];function r(n,c,s,h,d,T){return a(),l("div",null,o)}const u=e(t,[["render",r]]);export{P as __pageData,u as default};
